//@version=5
//written by: KhanhCT
indicator("Candle Range", shorttitle="Candle Range", overlay=true)

start_time = input.time(timestamp("20 Jul 2024 00:00 +0300"), "Start Time")
end_time = input.time(timestamp("20 Jul 2024 00:00 +0300"), "End Time")

tokyo_session_time = input.session('0500-1400', '', inline = 'sesTokyo', group = 'Tokyo Session')
london_session_time = input.session('1400-2300', '', inline = 'seslondon', group = ' London Session')
nw_session_time = input.session('1700-0500', '', inline = 'sesNewyork', group = 'Newyork Session')

tokyo_session = math.sign(nz(time(timeframe.period, tokyo_session_time, 'UTC+7')))
ld_session = math.sign(nz(time(timeframe.period, london_session_time, 'UTC+7')))
nw_session = math.sign(nz(time(timeframe.period, nw_session_time, 'UTC+7')))

//Input Settings
sizeOption = input.string("Tiny", options = ["Auto", "Huge", "Large", "Normal", "Small", "Tiny"], group="Label Size")
labelSize = (sizeOption == "Huge") ? size.huge :
     (sizeOption == "Large") ? size.large :
     (sizeOption == "Small") ? size.small :
     (sizeOption == "Tiny") ? size.tiny :
     (sizeOption == "Auto") ? size.auto :
         size.normal

//Label Colors
colorLabel = input(title="Label Color", defval=#4169E1, inline="Color Settings",group="Label Colors")
colorText = input(title="Text Color", defval=color.black, inline="Color Settings",group="Label Colors")

//Text Only or Label Up or Label Down
labelType = input.string("Text Only", options =["Text Only", "Label Up"], group="Label Style")
labelStyle = (labelType == "Text Only") ? label.style_none : (labelType == "Label Up") ? label.style_label_up : label.style_none


DistanceBar = input.int(title="/", defval=1, maxval=50, minval=-50, inline="Bar Offset Settings",group="Label Distance from Bar")

// Calculate Bar Difference
var totalcandlecount = 0
var totalPrice = 0.0
if time >= start_time and time <= end_time
    totalcandlecount += 1
    diff = high[0] - low[0]
    totalPrice += diff
    labeltext = str.tostring(diff)
    if diff < 50
        label_ = label.new(bar_index[0], low[0]-DistanceBar, text=labeltext, color=colorLabel, textcolor=colorText, style=labelStyle, size=labelSize)
    else
        label_ = label.new(bar_index[0], high[0]+DistanceBar, text=labeltext, color=colorLabel, textcolor=colorText, style=labelStyle, size=labelSize)



// Calculate avg price by session
var float tokyo_hight = 0
var float tokyo_low = 0
var tokyo_count = 0
var float tokyo_avg = 0

var float ld_hight = 0
var float ld_low = 0
var ld_count = 0
var float ld_avg = 0

var float nw_hight = 0
var float nw_low = 0
var nw_count = 0
var float nw_avg = 0

if time >= start_time and time <= end_time
    // Tokyo  session
    if tokyo_session == 1
        if tokyo_session[1] == 0
            tokyo_hight := high
            tokyo_low := low
            tokyo_count += 1
        
        tokyo_hight := math.max(tokyo_hight, high)
        tokyo_low := math.min(tokyo_low, low)
        
    if tokyo_session == 0
        tokyo_price = tokyo_hight - tokyo_low
        tokyo_avg += tokyo_price
        if tokyo_price > 0
            log.info("Tokyo," + str.tostring(tokyo_price))
        tokyo_hight := 0
        tokyo_low := 0

    // London session
    if ld_session == 1
        if ld_session[1] == 0
            ld_hight := high
            ld_low := low
            ld_count += 1
        
        ld_hight := math.max(ld_hight, high)
        ld_low := math.min(ld_low, low)
        
    if ld_session == 0
        ld_price = ld_hight - ld_low
        ld_avg += ld_price
        if ld_price > 0
            log.info("London," + str.tostring(ld_price))
        ld_hight := 0
        ld_low := 0

    // NW session
    if nw_session == 1
        if nw_session[1] == 0
            nw_hight := high
            nw_low := low
            nw_count += 1
        
        nw_hight := math.max(nw_hight, high)
        nw_low := math.min(nw_low, low)
        
    if nw_session == 0
        nw_price = nw_hight - nw_low
        nw_avg += nw_price
        if nw_price > 0
            log.info("NW," + str.tostring(nw_price))
        nw_hight := 0
        nw_low := 0
    

//Info Table
var Info_Table = table.new(position.top_right, 3, 10, bgcolor = #283c74, border_color = #53609bcb, border_width = 1, 
 frame_color = #373a46 , frame_width = 1)
table.cell(Info_Table, 0, 0, 'Avg Price', text_color = color.white, text_size = size.small)
table.merge_cells(Info_Table, 0, 0, 2, 0)
table.cell(Info_Table, 0, 1, 'Total CandleStick', text_color = color.white, text_size = size.small)
table.cell(Info_Table, 1, 1, 'Total Price', text_color = color.white, text_size = size.small)
table.cell(Info_Table, 2, 1, 'Avg(Pips)', text_color = color.white, text_size = size.small)

table.cell(Info_Table, 0, 2, str.tostring(totalcandlecount), text_color = color.white, text_size = size.small)
table.cell(Info_Table, 1, 2, str.tostring(totalPrice), text_color = color.white, text_size = size.small)
table.cell(Info_Table, 2, 2, str.tostring(totalPrice/totalcandlecount), text_color = color.white, text_size = size.small)

table.cell(Info_Table, 0, 3, "Tokyo Avg Price", text_color = color.white, text_size = size.small)
table.cell(Info_Table, 1, 3, str.tostring(tokyo_avg), text_color = color.white, text_size = size.small)
table.cell(Info_Table, 2, 3, str.tostring(tokyo_avg/tokyo_count), text_color = color.white, text_size = size.small)

table.cell(Info_Table, 0, 4, "London Avg Price", text_color = color.white, text_size = size.small)
table.cell(Info_Table, 1, 4, str.tostring(ld_avg), text_color = color.white, text_size = size.small)
table.cell(Info_Table, 2, 4, str.tostring(ld_avg/ld_count), text_color = color.white, text_size = size.small)


table.cell(Info_Table, 0, 5, "Nw Avg Price", text_color = color.white, text_size = size.small)
table.cell(Info_Table, 1, 5, str.tostring(nw_avg), text_color = color.white, text_size = size.small)
table.cell(Info_Table, 2, 5, str.tostring(nw_avg/(nw_count - 1)), text_color = color.white, text_size = size.small)