//@version=5
//author: mladen
//rebound arrows and TMA angle caution: Ale
//rewritten from MQL5 to Pine: Brylator
indicator("TMA Indicator", "TMA v0.42", overlay = true, max_lines_count = 500, max_labels_count = 500)

//INPUTS
var GRP1 = "Parameters"
HalfLength = input.int(15, "Centered TMA half period", group = GRP1)
string PriceType = input.string("Weighted", "Price to use", options = ["Close", "Open", "High", "Low", "Median", "Typical", "Weighted", "Average"], group = GRP1)
AtrPeriod = input.int(34, "Average true range period", group = GRP1)
AtrMultiplier = input.float(2, "Average true range multiplier", group = GRP1)
TMAangle = input.int(4, "Centered TMA angle caution", group = GRP1)
maDelta = input.float(defval=40, title="MA Delta", minval=0, maxval=100, step=0.1)
rsiDelta = input.float(defval=5, title="RSI Delta", minval=0, maxval=100, step=0.1)
rsiDelay = input.int(defval=3, title="RSI Delay", minval=1, maxval=100, step=1)

//VARIABLES
float tmac = na
float tmau = na
float tmad = na

var float pastTmac = na //from the previous candle
var float pastTmau = na
var float pastTmad = na

float tmau_temp = na //before looping
float tmac_temp = na
float tmad_temp = na

float point = syminfo.pointvalue //NEEDS MORE TESTS

bool last = false //checks if a loop is needed

var string alertSignal = "EMPTY" //needed for alarms to avoid repetition

//COLORS
var GRP2 = "Colors"
var color colorBuffer = na
color colorDOWN = input.color(color.new(color.red, 0), "Bear", inline = "5", group = GRP2)
color colorUP = input.color(color.new(color.green, 0), "Bull", inline = "5", group = GRP2)
color colorBands = input.color(color.new(#b2b5be, 0), "Bands", inline = "5", group = GRP2)
bool cautionInput = input.bool(true, "Caution label", inline = "6", group = GRP2)

//ALERTS
var GRP3 = "Alerts (Needs to create alert manually after every change)"
bool crossUpInput = input.bool(false, "Crossing up", inline = "7", group = GRP3)
bool crossDownInput = input.bool(false, "Crossing down", inline = "7", group = GRP3)
bool comingBackInput = input.bool(false, "Coming back", inline = "7", group = GRP3)
bool onArrowDownInput = input.bool(false, "On arrow down", inline = "8", group = GRP3)
bool onArrowUpInput = input.bool(false, "On arrow up", inline = "8", group = GRP3)

//CLEAR LINES
a_allLines = line.all
if array.size(a_allLines) > 0
    for p = 0 to array.size(a_allLines) - 1
        line.delete(array.get(a_allLines, p))
        
//GET PRICE        
Price(x) =>
    float price = switch PriceType
        "Close" => close[x]
        "Open" => open[x]
        "High" => high[x]
        "Low" => low[x]
        "Median" => (high[x] + low[x]) / 2
        "Typical" => (high[x] + low[x] + close[x]) / 3
        "Weighted" => (high[x] + low[x] + close[x] + close[x]) / 4
        "Average" => (high[x] + low[x] + close[x] + open[x])/ 4
    price

// Stochastic 
lengthRSI = input.int(14, "RSI Length", minval=1, group = 'Others')
periodK1 = input.int(10, title="K1 Length", minval=1, group = "TMA")
periodK2 = input.int(21, title="K2 Length", minval=1, group = "TMA")
periodD = input.int(5, title="D Smoothing", minval=1, group = "TMA")

smoothK1 = input.int(5, title="K1 Smoothing", minval=1, group = "TMA")
smoothK2 = input.int(9, title="K2 Smoothing", minval=1, group = "TMA")

k1 = ta.sma(ta.stoch(close, high, low, periodK1), smoothK1)
d1 = ta.sma(k1, periodD)

k2 = ta.sma(ta.stoch(close, high, low, periodK2), smoothK2)
d2 = ta.sma(k2, periodD)

plot(k1, title="K1", color=color.blue)
plot(d1, title="D1", color=color.black)
plot(k2, title="K2", color=color.orange)

// Calculate RSI
Rsi(src) =>
    up = ta.rma(math.max(ta.change(src), 0), lengthRSI)
    down = ta.rma(-math.min(ta.change(src), 0), lengthRSI)
    rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))
    rsi

// MAIN
for i = HalfLength to 0
    // ATR
    atr = 0.0
    for j = 0 to AtrPeriod - 1
        atr += math.max(high[i + j + 10], close[i + j + 11]) - math.min(low[i + j + 10], close[i + j + 11])
    atr /= AtrPeriod
    
    // BANDS
    sum = (HalfLength + 1) * Price(i)
    sumw = (HalfLength + 1)
    k = HalfLength
    for j = 1 to HalfLength
        sum += k * Price(i + j)
        sumw += k
        if (j <= i)
            sum  += k * Price(i - j)
            sumw += k
        k -= 1
    tmac := sum/sumw
    tmau := tmac+AtrMultiplier*atr
    tmad := tmac-AtrMultiplier*atr
            
    //CHANGE TREND COLOR
    if pastTmac != 0.0
        if tmac > pastTmac
            colorBuffer := colorUP
        if tmac < pastTmac
            colorBuffer := colorDOWN
            
    //SIGNALS
    reboundD = 0.0
    reboundU = 0.0
    caution = 0.0
    if pastTmac != 0.0
        xDelta = k1[i] - k2[i]
        xCondition = xDelta <= -maDelta or xDelta >= -maDelta
        if (high[i + 1] > pastTmau and close[i + 1] > open[i + 1] and close[i] < open[i] and xCondition == true)
            reboundD := high[i] + AtrMultiplier * atr / 2
            if (tmac - pastTmac > TMAangle * point)
                caution := reboundD + 10 * point
    
        if (low[i + 1] < pastTmad and close[i + 1] < open[i + 1] and close[i] > open[i] and xCondition == true)
            reboundU := low[i] - AtrMultiplier * atr / 2
            if (pastTmac - tmac > TMAangle * point)
                caution := reboundU - 10 * point
    
    //LAST REAL
    if barstate.islast and i == HalfLength
        last := true
        tmau_temp := tmau
        tmac_temp := tmac
        tmad_temp := tmad
        
    //DRAW HANDICAPPED BANDS
    if barstate.islast and i < HalfLength
        line.new(bar_index - (i + 1), pastTmau, bar_index - (i), tmau, width = 2, style = line.style_dotted, color = colorBands)
        line.new(bar_index - (i + 1), pastTmac, bar_index - (i), tmac, width = 2, style = line.style_dotted, color = colorBuffer)
        line.new(bar_index - (i + 1), pastTmad, bar_index - (i), tmad, width = 2, style = line.style_dotted, color = colorBands)
        
    
    // Buy/Sell condition
    sellDelta = k1 - k2
    sellCondition = sellDelta >= -maDelta and sellDelta <= maDelta

    buyDelta = k2 - k1
    buyCondition = buyDelta >= -maDelta and buyDelta <= maDelta
    
    rsi = ta.rsi(source = close[i], length = 14) 
    smoothedRsi = ta.sma(rsi, rsiDelay)
    //DRAW SIGNALS
    if reboundD != 0
        // label.new(bar_index - (i), reboundD, '▼', color = na, textcolor = color.red, textalign=text.align_center)
        rsiCondition = smoothedRsi >= 70 - rsiDelta or smoothedRsi < 70 - rsiDelta
        if sellCondition == true and rsiCondition == true
            label.new(bar_index - (i) + 1, reboundD, '▼', color = na, textcolor = color.red, textalign=text.align_center)
        if i == 0 and onArrowDownInput == true
            alert("Down arrow") 
        if caution != 0 and cautionInput == true
            label.new(bar_index - (i), reboundD, color = colorUP, style = label.style_xcross, size = size.tiny, textcolor = na)
        // if smoothedRsi >= 70 -rsiDelta
        //  label.new(bar_index - (i) - 1, reboundD, text='▼', color = na, textcolor=color.yellow, style=label.style_circle, textalign=text.align_center)
        

    if reboundU != 0
        // label.new(bar_index - (i), reboundU, '▲', color = na, textcolor = color.blue, textalign = text.align_center)
        rsiCondition = smoothedRsi <= 30 + rsiDelta or smoothedRsi > 30 + rsiDelta
        if buyCondition == true and rsiCondition == true
            label.new(bar_index - (i) + 1, reboundU, '▲', color = na, textcolor = color.blue, textalign = text.align_center)
        if i == 0 and onArrowUpInput == true
            alert("UP arrow") 
        if caution != 0 and cautionInput == true
            label.new(bar_index - (i), reboundU, color = colorDOWN, style = label.style_xcross, size = size.tiny, textcolor = na)
        // if smoothedRsi <= 30 + rsiDelta
        //    label.new(bar_index - (i) - 1, reboundU, '▲', color = na, textcolor = color.yellow, textalign = text.align_center)
        
      
    //SAVE HISTORY
    pastTmac := tmac
    pastTmau := tmau
    pastTmad := tmad
    
    //LOOP IS ONLY FOR HANDICAPPED
    if barstate.islast != true
        break
        
// DRAW REAL BANDS
plot(last ? tmau_temp : tmau, title = "TMA Up", color = colorBands, linewidth=1, style = plot.style_line, offset = -HalfLength)
plot(last ? tmac_temp : tmac, title = "TMA Mid", color = colorBuffer, linewidth=1, style = plot.style_line, offset = -HalfLength)
plot(last ? tmad_temp : tmad, title = "TMA Down", color = colorBands, linewidth=1, style = plot.style_line, offset = -HalfLength)

plot(k1, title="K1", color=color.blue)
plot(d1, title="D1", color=color.black)

plot(k2, title="K2", color=color.orange)